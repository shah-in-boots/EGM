[{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://shah-in-boots.github.io/EGM/articles/getting-started.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in Data","title":"Getting Started","text":"Thie software supports reading certain types raw cardiac electric signal currently. includes intracardiac extracardiac data. Please see read_muse() read_bard() examples. additional formats requested, please file issue provide sample file (primarily requires signal, whatever format, meta-information individual channels). simple example taking MUSE XML file converting digital signal. tested 9th version MUSE XML format.  Similarly, intracardiac recordings obtained bard can read well. function documents generally work.","code":"# Read in data fp <- system.file('extdata', 'muse-sinus.xml', package = 'EGM') xml <- readLines(fp) head(xml) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\" #> [2] \"<!DOCTYPE RestingECG SYSTEM \\\"restecg.dtd\\\">\"    #> [3] \"<RestingECG>\"                                    #> [4] \"   <MuseInfo>\"                                   #> [5] \"      <MuseVersion>9.0.10.18530<\/MuseVersion>\"   #> [6] \"   <\/MuseInfo>\"  # Instead, can read this in as a MUSE XML file # Now as an `egm` class ecg <- read_muse(fp) ecg #> <Electrogram> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:    #> Type: Standard 12-lead ECG  # Can now plot this easily ggm(ecg) +    theme_egm_light() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. # Read in data fp <- system.file('extdata', 'bard-avnrt.txt', package = 'EGM') bard <- readLines(fp) head(bard, n = 20) #>  [1] \"[Header]\"                  \"File Type: 1\"              #>  [3] \"Version: 2\"                \"Channels exported: 11\"     #>  [5] \"Samples per channel: 3522\" \"Start time: 15:17:57\"      #>  [7] \"End time: 15:18:01\"        \"Ch. Info. Pointer: 320\"    #>  [9] \"Stamp Data: C\"             \"Mux format: 0\"             #> [11] \"Mux Block Size: \"          \"Data Format 1\"             #> [13] \"Sample Rate: 1000Hz\"       \"Channel #:   1\"            #> [15] \"Label: I\"                  \"Range: 5mv \"               #> [17] \"Low: .5Hz\"                 \"High: 100Hz\"               #> [19] \"Sample rate: 1000Hz\"       \"Color: FFFFFF\"  # Instead, read this as signal, breaking apart header and signal data # Presented as an `egm` class object egram <- read_bard(fp) egram #> <Electrogram> #> ------------------- #> Recording Duration:  3.522 seconds #> Recording frequency  1000  hz #> Number of channels:  11  #> Channel Names:  I III V1 CS 1-2 CS 3-4 CS 5-6 CS 7-8 CS 9-10 HIS D HIS M RV 1-2  #> Annotation:  # Similarly, can be visualized with ease ggm(egram, channels = c('HIS', 'CS', 'RV'), mode = NULL) +     theme_egm_dark()  #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://shah-in-boots.github.io/EGM/articles/getting-started.html","id":"class-introduction","dir":"Articles","previous_headings":"","what":"Class Introduction","title":"Getting Started","text":"EGM package introduces specific data-oriented class called egm (note lower-case spelling compared package name). class primary data structure, allows compatibility within multiple signal types, including reading WFDB-formatted data. class, everything can written well - preferred option stated WFDB format.","code":""},{"path":"https://shah-in-boots.github.io/EGM/articles/segmentation-guide.html","id":"sinus-rhythm","dir":"Articles","previous_headings":"","what":"Sinus rhythm","title":"Signal Segmentation","text":"initial approach use sinus rhythm, can easily evaluated using rule-based approach: QRSiQRS_{} (index QRS complex) QRSi+1QRS_{+1} (following QRS complex), must T wave QRSiQRS_{} QRSi−1QRS_{-1} (previous QRS complex), must P wave ≥ 1 additional depolarization signals PiP_{} QRSiQRS_{} file represent ECG data set obtained MUSE v9 contains 12-leads data 10 seconds.","code":"ecg <- read_wfdb(record = 'muse-sinus',                  record_dir = system.file('extdata', package = 'egm'),                  annotator = 'ecgpuwave') # Example data ecg"},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb-guide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"WFDB: An Introduction to the Waveform Database Software Package","text":"install WFDB software traditional, C-based format, found easiest teh instructions Github source. installation instructions relatively clear across multiple operating systems. WFDB easiest install Unix-based system, Linux MacOS. Windows, found using WSL2 consistent supported way utilize software. hidden WSL, path must specified explicitly using set_wfdb_path() function using command Powershell, example, switch WSL command environment. place, able work WFDB files directly R without significant overhead costs, also gaining access variety software applications.","code":"set_wfdb_path(\"wsl /usr/local/bin\")"},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb-guide.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"WFDB: An Introduction to the Waveform Database Software Package","text":"WFDB software package utilizes binary format store annotations. Annotations essentially markers qualifiers specific components signal, specifying specific time position plot, channel annotation refers . Annotations polymorphic, multiple can applied single signal dataset. credit work goes directly original software creators, just wrapper allow flexible integration R. begin, let’s take example simple ECG dataset. data included package, can accessed .  may customized software, manual approaches, machine learning models may label signal data. can use annotation_table() function create WFDB-compatible annotations, updating egm object written file. trial , let’s label peaks QRS complex 12-lead ECG. Create quick, non-robust function labeling QRS complex peaks. function pracma::findpeaks() quite good, avoid dependencies writing . Evaluate fit peaks dataset Place annotations table, updating egm object Plot results  result bad simple peak finder, lets us generate small dataset annotations can used. Please see additional vignettes advanced annotation options, multichannel plots, multichannel annotations. can take look hood annotation positions generated. relevant arguments, displayed , include: annotator: name annotation function creator time: constructed sample number frequency sample: integer index positions type: single character describing type subtype: single character describing type channel: channel data mapped number: additional qualifier annotation type","code":"fp <- system.file('extdata', 'muse-sinus.xml', package = 'EGM') ecg <- read_muse(fp) fig <- ggm(ecg) + theme_egm_light() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. fig # Let x = 10-second signal dataset # We will apply this across the dataset # This is an oversimplified approach. find_peaks <- function(x,                        threshold =                           mean(x, na.rm = TRUE) + 2 * sd(x, na.rm = TRUE)                        ) {      # Ensure signal is \"positive\" for peak finding algorithm   x <- abs(x)      # Find the peaks   peaks <- which(diff(sign(diff(x))) == -2) + 1      # Filter the peaks   peaks <- peaks[x[peaks] > threshold]      # Return   peaks }  # Create a signal dataset dat <- extract_signal(ecg)  # Find the peaks sig <- dat[[\"I\"]] pk_loc <- find_peaks(sig) pk_val <- sig[pk_loc] pks <- data.frame(x = pk_loc, y = pk_val)  # Plot them plot(sig, type = \"l\") points(x = pks$x, y = pks$y, col = \"orange\") # Find the peaks raw_signal <- dat[[\"I\"]] peak_positions <- find_peaks(raw_signal) peak_positions #>  [1]   96  427  759 1091 1753 2085 2417 2750 3080 3412 3744 4076 4409  # Annotations do not need to store the value at that time point however # The annotation table function has the following arguments args(annotation_table) #> function (annotator = character(), time = character(), sample = integer(),  #>     frequency = integer(), type = character(), subtype = character(),  #>     channel = integer(), number = integer(), ...)  #> NULL  # We can fill this in as below using additional data from the original ECG hea <- ecg$header start <- attributes(hea)$record_line$start_time hz <- attributes(hea)$record_line$frequency  ann <- annotation_table(   annotator = \"our_pks\",   sample = peak_positions,   type = \"R\",   frequency = hz,   channel = \"I\" )  # Here are our annotations ann #> <annotation_table: 13 `our_pks` annotations> #>             time sample   type subtype channel number #>           <char>  <num> <char>  <char>  <char>  <int> #>  1: 00:00:00.192     96      R               I      0 #>  2: 00:00:00.854    427      R               I      0 #>  3: 00:00:01.518    759      R               I      0 #>  4: 00:00:02.182   1091      R               I      0 #>  5: 00:00:03.506   1753      R               I      0 #>  6:  00:00:04.17   2085      R               I      0 #>  7: 00:00:04.834   2417      R               I      0 #>  8:   00:00:05.5   2750      R               I      0 #>  9:  00:00:06.16   3080      R               I      0 #> 10: 00:00:06.824   3412      R               I      0 #> 11: 00:00:07.488   3744      R               I      0 #> 12: 00:00:08.152   4076      R               I      0 #> 13: 00:00:08.818   4409      R               I      0  # Then, add this back to the original signal ecg$annotation <- ann ecg #> <Electrogram> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  our_pks  #> Type: Standard 12-lead ECG"},{"path":"https://shah-in-boots.github.io/EGM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anish S. Shah. Author, maintainer, copyright holder. Darren Seaney. Author.","code":""},{"path":"https://shah-in-boots.github.io/EGM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shah , Seaney D (2025). EGM: Intracardiac Electrograms. doi:10.32614/CRAN.package.EGM, R package version 0.1.1, https://shah--boots.github.io/EGM/.","code":"@Manual{EGM-package,   title = {EGM: Intracardiac Electrograms},   author = {Anish S. Shah and Darren Seaney},   year = {2025},   doi = {10.32614/CRAN.package.EGM},   url = {https://shah-in-boots.github.io/EGM/},   note = {R package version 0.1.1}, }"},{"path":"https://shah-in-boots.github.io/EGM/index.html","id":"egm","dir":"","previous_headings":"","what":"Evaluating Intracardiac Electrogram Data","title":"Evaluating Intracardiac Electrogram Data","text":"purpose EGM work electrophysiology (EP) signal data help understand simplify complexity complex, multi-channel electrical signal data. target audience working, particular, cardiac electrophysiology data, intracardiac electrograms surface electrocardiography. package heavily inspired gains additional functionality Waveform Database (WFDB) software package. goals major arms software … Adapt WFDB-compatible signal data R format interchangeable Provide simple visualization tools work short elements raw signal data Allow annotation intracardiac electrograms interactive manner Train allow development learning algorithms evaluation multi-channel time series data Please see vignettes details usage.","code":""},{"path":"https://shah-in-boots.github.io/EGM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Evaluating Intracardiac Electrogram Data","text":"can install released version EGM CRAN : development version GitHub : Notably, package software utilizes WFDB software available. can expect errors calling commands software appropriately installed. installation instructions available Github site.","code":"install.packages(\"EGM\") # install.packages(\"devtools\") devtools::install_github(\"shah-in-boots/EGM\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/EGM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EGM: Intracardiac Electrograms — EGM-package","title":"EGM: Intracardiac Electrograms — EGM-package","text":"system importing electrophysiological signal, based 'Waveform Database (WFDB)' software package, written Moody et al 2022 doi:10.13026/gjvw-1m31 . wrapper utilizing 'WFDB' functions reading writing signal data, well functions visualization analysis provided. stable broadly compatible class working signal data, supporting reading cardiac electrophysiological files intracardiac electrograms, introduced.","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/reference/EGM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EGM: Intracardiac Electrograms — EGM-package","text":"Maintainer: Anish S. Shah shah..boots@gmail.com (ORCID) [copyright holder] Authors: Darren Seaney dseaney2@uic.edu","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/EGM-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — EGM-vctrs","title":"Internal vctrs methods — EGM-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations to a ggm object — add_annotations","title":"Add annotations to a ggm object — add_annotations","text":"add_annotations() adds annotations ggm object. specific class requires output ggm() included data stored annotation_table().","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations to a ggm object — add_annotations","text":"","code":"add_annotations(...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/add_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add annotations to a ggm object — add_annotations","text":"... Arguments passed ggm data Data egm class, includes header (meta) signal information together. channels character vector channels use. Can give either channel label (e.g \"CS 1-2\") recording device/catheter type (e.g \"\" \"ECG\"). channels selected, default channels. time_frame time range displaced given format vector length 2. left value start, right value end time. given seconds (decimals may used). palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add color scheme to a ggm object — add_colors","title":"Add color scheme to a ggm object — add_colors","text":"Using add_colors() part theme process ggm object, turn visual representation egm object. Often, egm dataset contain default colors based signal data brought . add_colors() can allow customization features degree based opinionated color palettes.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add color scheme to a ggm object — add_colors","text":"","code":"add_colors(object, palette, mode)"},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add color scheme to a ggm object — add_colors","text":"object ggm object palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add color scheme to a ggm object — add_colors","text":"Returns updated ggm object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add color scheme to a ggm object — add_colors","text":"Currently, color choices individual decided based channel source (e.g. lead) inspired modern palettes. eventual goal function accept multitude palette options using heuristics similar found {ggplot2} graphing packages.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/analyze_atrial_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze F waves in atrial fibrillation ECG — analyze_atrial_signal","title":"Analyze F waves in atrial fibrillation ECG — analyze_atrial_signal","text":"Analyze F waves atrial fibrillation ECG","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/analyze_atrial_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze F waves in atrial fibrillation ECG — analyze_atrial_signal","text":"","code":"analyze_atrial_signal(   atrial_signal,   frequency,   characteristics = c(\"amplitude\", \"approximate_entropy\", \"dominant_frequency\"),   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/analyze_atrial_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze F waves in atrial fibrillation ECG — analyze_atrial_signal","text":"atrial_signal Numeric vector atrial signal frequency Sampling frequency signal characteristics Vector characteristics analyze ... Additional parameters specific analyses","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/analyze_atrial_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze F waves in atrial fibrillation ECG — analyze_atrial_signal","text":"list containing results requested analyses","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation Table — annotation_table","title":"Annotation Table — annotation_table","text":"annotation_table() modifies data.table class work annotation data. columns equal length, row describes single annotation (although may duplicate time points).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation Table — annotation_table","text":"","code":"annotation_table(   annotator = character(),   time = character(),   sample = integer(),   frequency = integer(),   type = character(),   subtype = character(),   channel = integer(),   number = integer(),   ... )  is_annotation_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation Table — annotation_table","text":"annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. time character time stamp annotation, written format HH:MM:SS.SSS, starting 00:00:00.000. converted appropriate time based header file (records actual start time sampling frequency). often missing variable given compatibility WFDB applications. sample integer representing sample number annotation frequency integer represents sampling frequency Hertz type character string representing type annotation subtype character string representing subtype annotation channel integer representing channel number annotation, character representing channel name number additional integer value number classifies annotation (allows compatibility multiple annotation types) ... Additional arguments passed function x data.table object represents annotation table","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation Table — annotation_table","text":"data.table invariant columns compatible WFDB library. key columns include sample index, type annotation (subtype number qualifier), channel.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation Table — annotation_table","text":"annotation_table() function creates compatible table can used write_annotation() read_annotation() functions.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"annotation-files","dir":"Reference","previous_headings":"","what":"Annotation files","title":"Annotation Table — annotation_table","text":"following annotation file types described .","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"ecgpuwave","dir":"Reference","previous_headings":"","what":"ecgpuwave","title":"Annotation Table — annotation_table","text":"ecgpuwave analyzes ECG signal specified record, detecting QRS complexes locating beginning, peak, end P, QRS, ST-T waveforms. output ecgpuwave written standard WFDB-format annotation file (extension \"*.ecgpuwave\", expected). file can converted text format using rdann. details given ECGPUWAVE page. type column can p, t, N peak P wave, T wave, QRS (R peak) directly. output notation also includes waveform onset XXX waveform offset XXX. number column gives information type labels. number column gives modifier information. type classifier T wave annotation, number column can 0 (normal), 1 (inverted), 2 (positive), 3 (negative), 4 (biphasic negative-positive), 5 (biphasic positive-negative). type waveform onset offset, number can 0 (P wave), 1 (QRS complex), 2 (T wave).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotators.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotator systems for WFDB objects — annotators","title":"Annotator systems for WFDB objects — annotators","text":"functions create templates annotation R extend ability developers create annotation systems stable WFDB objects. compatible WFDB annotations can written WFDB-compatible file. also allows extensibility.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/as_ecg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an egm object to an ecg object — as_ecg","title":"Convert an egm object to an ecg object — as_ecg","text":"Converts general egm object specialized ecg object 12-lead ECG analysis.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/as_ecg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an egm object to an ecg object — as_ecg","text":"","code":"as_ecg(x, ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/as_ecg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an egm object to an ecg object — as_ecg","text":"x object class egm ... Additional arguments","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/as_ecg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an egm object to an ecg object — as_ecg","text":"object class ecg","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"function allows reading LS Pro data based text export signals. Signals can exported directly LS Pro system. actual software written Bard. LabSystem Pro acquired Boston Scientific original company Bard. common electrophysiology signal processing device visualization measurement intracardiac signals.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"","code":"read_bard(file, n = Inf)  read_bard_header(file)  read_bard_signal(file, n = Inf)"},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"file path file data located. must *.txt file. See details format. n Number signal values return (channel data). Defaults values.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"egm class object list EP signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":"data-export","dir":"Reference","previous_headings":"","what":"Data Export","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"steps data export follows. Start LabSystem PRO Open patient record Display waveform recording Review Window Scroll point interest waveform recording Right click review window left region interest Select Export option, either default time range entire visible page (depends sweep speed).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/bard.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data Format","title":"Read in ECG and EGM data from Bard (LabSystem Pro) — bard","text":"Channel Data interleaved example (sample indexed 1):","code":"[Header] Recording info – contains (example):  [Header]<CR><LF>      File Type: 1<CR><LF>      Version: 1<CR><LF>      Channels exported: 22<CR><LF>      Samples per channel: 5000<CR><LF>      Start time:  6:55:24<CR><LF>      End time:  6:55:29<CR><LF>      Ch. Info. Pointer: 320<CR><LF>      Stamp Data: T<CR><LF>      Mux format: 0<CR><LF>      Mux Block Size: <CR><LF>      Data Format 1<CR><LF>      Sample Rate: 1000Hz<CR><LF>  [Header] Channel info (per channel example):    Channel #: 1<CR><LF>   Label: III<CR><LF>      Range: 5mv <CR><LF>      Low: 1Hz<CR><LF>      High: 100Hz<CR><LF>      Sample rate: 1000Hz<CR><LF>      Color: 0000FF<CR><LF>      Scale: -7<CR><LF>  [Data] As described below:      -256,-1056,576,-256,320,-736,144,576,-592,176,608,240,176,-560,496,-     144,0,0,-32,-48,-32,-80<CR><LF>"},{"path":"https://shah-in-boots.github.io/EGM/reference/c.windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate windowed objects — c.windowed","title":"Concatenate windowed objects — c.windowed","text":"Concatenate windowed objects","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/c.windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate windowed objects — c.windowed","text":"","code":"# S3 method for class 'windowed' c(...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/c.windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate windowed objects — c.windowed","text":"... windowed objects concatenate","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/c.windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate windowed objects — c.windowed","text":"windowed object containing elements input objects","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"function computes approximate entropy (Ap_en) time series using method described Pincus (1991). Ap_en measure regularity complexity time series. calculated comparing vectors derived time series m-dimensional embedded space (m+1)-dimensional space. basic steps : Embedding: time series embedded vectors length m (m+1) taking successive elements. time series length N, produces (N - m + 1) ((N - m) m+1) vectors. Distance Calculation: pair embedded vectors, Chebyshev distance (.e., maximum absolute difference among corresponding elements) computed. distance two vectors less equal tolerance r, considered \"similar.\" Counting Averaging: embedded vector, function counts number similar vectors (including ) takes natural logarithm ratio count total number vectors. log-values averaged yield statistic phi. Ap_en Calculation: approximate entropy difference phi computed dimension m phi computed dimension m+1, .e., Ap_en = phi(m) - phi(m+1). tolerance r typically chosen multiple standard deviation time series (commonly 3.5 * sd(x)). r provided (negative), calculated automatically.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"","code":"calculate_approximate_entropy(x, m = 3, r = NULL, implementation = \"C++\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"x Numeric vector time series m Embedding dimension (sample size), default 3 r Tolerance (threshold), default 3.5 * sd(x) implementation Method use calculation, default \"C++\", can also done \"R\". C++ implementation faster.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"Approximate Entropy value","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"Pincus, S. M. (1991). Approximate entropy measure system complexity. Proceedings National Academy Sciences, 88(6), 2297-2301.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_approximate_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Approximate Entropy (Ap_en) of a time series — calculate_approximate_entropy","text":"","code":"# Example: Calculate approximate entropy for a random time series set.seed(123) x <- rnorm(1000) calculate_approximate_entropy(x, m = 3, r = -1, implementation = \"R\") #> [1] NaN"},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_dominant_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dominant Frequency of a time series — calculate_dominant_frequency","title":"Calculate Dominant Frequency of a time series — calculate_dominant_frequency","text":"Calculate Dominant Frequency time series","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_dominant_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dominant Frequency of a time series — calculate_dominant_frequency","text":"","code":"calculate_dominant_frequency(x, frequency, f_min = 4, f_max = 9)"},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_dominant_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dominant Frequency of a time series — calculate_dominant_frequency","text":"x Numeric vector time series frequency Sampling frequency signal f_min Minimum frequency consider (default 4 Hz) f_max Maximum frequency consider (default 9 Hz)","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/calculate_dominant_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dominant Frequency of a time series — calculate_dominant_frequency","text":"Dominant Frequency Hz","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the color for a channel based on palettes — color_channels","title":"Identify the color for a channel based on palettes — color_channels","text":"primarily restricts colors color-space safe options. intended used add_colors() provide color scheme ggm object. exposed users custom advanced theming options.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the color for a channel based on palettes — color_channels","text":"","code":"color_channels(x, palette, mode = \"dark\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the color for a channel based on palettes — color_channels","text":"x Vector character names requested ECG EGM leads palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the color for a channel based on palettes — color_channels","text":"Vector hex code colors character based selected palette light/dark mode","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Theming and color options for ggm objects — colors","title":"Theming and color options for ggm objects — colors","text":"general purpose improve visualization electrical signals. pattern colors generally given different recording software, can replicated help improve visibility.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theming and color options for ggm objects — colors","text":"","code":"theme_egm()  theme_egm_light()  theme_egm_dark()"},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theming and color options for ggm objects — colors","text":"ggm object, inheritance similar ggplot2::theme_minimal()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect QRS complexes in ECG signals — detect_QRS","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"detect_QRS() implements modified Pan-Tompkins algorithm detect QRS complexes ECG signals. function applies sequence processing steps including bandpass filtering, differentiation, squaring, moving window integration identify R peaks signal.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"","code":"detect_QRS(signal, frequency, window_size = 0.15)"},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"signal Numeric vector representing ECG signal frequency Sampling frequency signal Hz window_size Width integration window seconds, default 0.150 seconds","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"Integer vector containing sample indices detected QRS complexes","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"Pan-Tompkins algorithm widely-used method QRS detection ECG signals. implementation follows steps: Bandpass filtering (5-15 Hz) reduce noise emphasize QRS complexes Differentiation highlight steep slopes QRS complexes 3. Squaring amplify high-frequency components 4. Moving window integration consider overall QRS morphology 5. Adaptive thresholding identify peaks 6. Application refractory period prevent multiple detections QRS complex function designed work single-lead ECG signals, typically sampled 250-1000 Hz.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"Pan, J., & Tompkins, W. J. (1985). real-time QRS detection algorithm. IEEE Transactions Biomedical Engineering, (3), 230-236. doi:10.1109/TBME.1985.325532","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_QRS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect QRS complexes in ECG signals — detect_QRS","text":"","code":"if (FALSE) { # \\dontrun{ # Load ECG data ecg_data <- read_muse(system.file(\"extdata\", \"muse-sinus.xml\", package = \"EGM\"))  # Extract lead II signal signal <- ecg_data$signal$II  # Get sampling frequency from header freq <- attributes(ecg_data$header)$record_line$frequency  # Detect QRS complexes qrs_locations <- detect_QRS(signal, freq)  # Plot ECG with detected QRS complexes plot(signal, type = \"l\", xlab = \"Sample\", ylab = \"Amplitude\") points(qrs_locations, signal[qrs_locations], col = \"red\", pch = 19) } # }"},{"path":"https://shah-in-boots.github.io/EGM/reference/ecg.html","id":null,"dir":"Reference","previous_headings":"","what":"Electrocardiogram data class for 12-lead ECG studies — ecg","title":"Electrocardiogram data class for 12-lead ECG studies — ecg","text":"class serves specialized extension egm class specifically standard 12-lead electrocardiogram data. inherits functionality egm providing additional validation methods specific 12-lead ECG analysis.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ecg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electrocardiogram data class for 12-lead ECG studies — ecg","text":"","code":"ecg(   signal = signal_table(),   header = header_table(),   annotation = annotation_table(),   ... )  is_ecg(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/ecg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Electrocardiogram data class for 12-lead ECG studies — ecg","text":"signal signal_table object generated signal_table() function containing standard ECG leads header header_table object generated header_table() function annotation annotation_table object generated annotation_table() function ... Additional arguments passed function x ecg object used support functions","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ecg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Electrocardiogram data class for 12-lead ECG studies — ecg","text":"object class ecg (inherits egm) containing signal, header, annotation components.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ecg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Electrocardiogram data class for 12-lead ECG studies — ecg","text":"ecg object contains three components egm: signal data multiple channels (specifically 12 standard ECG leads) header information annotation labels specified time points primary difference class enforces validation ensure data represents standard 12-lead ECG appropriate lead names.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":null,"dir":"Reference","previous_headings":"","what":"Electrogram data class from electrophysiology studies — egm","title":"Electrogram data class from electrophysiology studies — egm","text":"class serves combinatorial class describe cardiovascular electrical signal data R. based formats available WFDB, formatted ease use within R ecosystem. egm object contains three components list: signal data multiple channels header information annotation labels specified time points components help navigate, visualize data. egm class backbone working WFDB objects R, provides interface integrating converting raw signal data WFDB format.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electrogram data class from electrophysiology studies — egm","text":"","code":"egm(   signal = signal_table(),   header = header_table(),   annotation = annotation_table(),   ... )  is_egm(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Electrogram data class from electrophysiology studies — egm","text":"signal signal_table object generated signal_table() function header header_table object generated header_table() function annotation annotation_table object generated annotation_table() function ... Additional arguments passed function x egm object, typically generated egm() function, used support functions (e.g. is_egm()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Electrogram data class from electrophysiology studies — egm","text":"object class egm always list three components. Oftentimes, annotation_table object may missing, replaced empty table place holder.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Electrogram data class from electrophysiology studies — egm","text":"individual components class defined respective children functions signal_table(), header_table(), annotation_table(). simple classes build upon data.table class allow class safety checks working different data types (particularly WFDB). IMPORTANT: egm class can built ground-user, however primarily generated user using read/write functions, read_bard() read_wfdb().","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_f_waves.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract F wave features from ECG — extract_f_waves","title":"Extract F wave features from ECG — extract_f_waves","text":"function analyzes F waves ECG signal, extracting various characteristics.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_f_waves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract F wave features from ECG — extract_f_waves","text":"","code":"extract_f_waves(   object,   lead = NULL,   qrs_method = \"adaptive_svd\",   f_characteristics = \"amplitude\",   verbose = TRUE,   .force_all = FALSE,   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_f_waves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract F wave features from ECG — extract_f_waves","text":"object object class egm subclass ecg lead Optional. character string specifying lead analyze. NULL (default), available surface leads processed. qrs_method Method ventricular signal removal. Default \"adaptive_svd\" adaptive singular value decomposition. f_characteristics Vector characteristics analyze ECG signal. Options: \"amplitude\", \"approximate_entropy\", \"dominant_frequency\". Please see calculate_approximate_entropy() calculate_dominant_frequency() details. verbose Logical. TRUE, print information leads analyzed. Default TRUE. .force_all Logical. FALSE (default), process surface ECG leads. TRUE, process available leads. parameter ignored object class 'ecg', case leads processed. ... Additional arguments passed methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_f_waves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract F wave features from ECG — extract_f_waves","text":"list containing F wave features processed lead","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_f_waves.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract F wave features from ECG — extract_f_waves","text":"Park, Junbeom, Chungkeun Lee, Eran Leshem, Ira Blau, Sungsoo Kim, Jung Myung Lee, Jung-Hwang, Byung-il Choi, Moon-Hyoung Lee, Hye Jin Hwang. \"Early Differentiation Long-Standing Persistent Atrial Fibrillation Using Characteristics Fibrillatory Waves Surface ECG Multi-Leads.\" Scientific Reports 9 (February 26, 2019): 2746. https://doi.org/10.1038/s41598-019-38928-6. Hyvarinen, ., Oja, E. (2000). Independent component analysis: algorithms applications. Neural Networks, 13(4-5), 411-430.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract raw signal data from an egm object — extract_signal","title":"Extract raw signal data from an egm object — extract_signal","text":"Raw signal data may required, particularly storing manipulating data, example, feeding analytical pipeline. means extraneous elements, meta information, may unnecessary. function helps strip away extract just signal data channel names.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract raw signal data from an egm object — extract_signal","text":"","code":"extract_signal(object, data_format = c(\"data.frame\", \"matrix\", \"array\"), ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract raw signal data from an egm object — extract_signal","text":"object egm object contains signal data extracted data_format character choice either data.frame (default), matrix, array tells data structured. explanation details. ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract raw signal data from an egm object — extract_signal","text":"object described format option","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract raw signal data from an egm object — extract_signal","text":"options return data vary based need. data can extracted follows: data.frame containing equal number rows number samples, column named recording channel derived . Data frames, columnar nature, also include sample index position. matrix containing equal number rows number samples, column named recording channel derived array containing individual vectors signal, named channel derived ","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/format.windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a windowed object for printing — format.windowed","title":"Format a windowed object for printing — format.windowed","text":"Format windowed object printing","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/format.windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a windowed object for printing — format.windowed","text":"","code":"# S3 method for class 'windowed' format(x, ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/format.windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a windowed object for printing — format.windowed","text":"x windowed object ... Additional arguments passed methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/format.windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a windowed object for printing — format.windowed","text":"Invisibly returns x","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of EGMs using ggplot — ggm","title":"Visualization of EGMs using ggplot — ggm","text":"ggm() function used plot objects egm class. function however just plotting function - serves visualization tool confirmation patterns, annotations, underlying waveforms data. power , instead geom_*() object, annotations, intervals, measurements can added incrementally.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of EGMs using ggplot — ggm","text":"","code":"ggm(   data,   channels = character(),   time_frame = NULL,   palette = NULL,   mode = \"dark\",   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of EGMs using ggplot — ggm","text":"data Data egm class, includes header (meta) signal information together. channels character vector channels use. Can give either channel label (e.g \"CS 1-2\") recording device/catheter type (e.g \"\" \"ECG\"). channels selected, default channels. time_frame time range displaced given format vector length 2. left value start, right value end time. given seconds (decimals may used). palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of EGMs using ggplot — ggm","text":"{ggplot2} compatible object ggm class, contains additional elements header annotations original data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Table — header_table","title":"Header Table — header_table","text":"header_table() modifies data.table class work header data. header data read similar format WFDB files compatible/interchangeable writing disk. details extensively cover type data input. Generally, function called read_*_header() functions generally called end-user.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Table — header_table","text":"","code":"header_table(   record_name = character(),   number_of_channels = integer(),   frequency = 250,   samples = integer(),   start_time = strptime(Sys.time(), \"%Y-%m-%d %H:%M:%OSn\"),   ADC_saturation = integer(),   file_name = character(),   storage_format = 16L,   ADC_gain = 200L,   ADC_baseline = ADC_zero,   ADC_units = \"mV\",   ADC_resolution = 12L,   ADC_zero = 0L,   initial_value = ADC_zero,   checksum = 0L,   blocksize = 0L,   label = character(),   info_strings = list(),   additional_gain = 1,   low_pass = integer(),   high_pass = integer(),   color = \"#000000\",   scale = integer() )  is_header_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Table — header_table","text":"record_name character vector record line information number_of_channels integer describing number signals frequency numeric value sampling frequency, 250 Hz default samples integer number samples start_time POSIXct time recording, miliseconds included. example, strptime(start_time, \"%Y-%m-%d %H:%M%:%OSn\") described base::strptime() ADC_saturation integer representing ADC saturation file_name character signal specific information storage_format integer bits storage format, 16-bit default ADC_gain integer ADC gain, default 200 ADC_baseline integer ADC baseline, defaults ADC_zero ADC_units character describe ADC units, \"mV\" default ADC_resolution integer ADC resolution, default 12 ADC_zero integer ADC zero, defaults 0 initial_value integer initial value, defaults ADC_zero value checksum integer serves checksum blocksize integer block size label character description signal info_strings list strings written appendix header file, usually containing information channels, (e.g. list colors, extra labels, etc). additional_gain numeric Additional gain, defaults 1.0 low_pass integer Low pass filter high_pass integer High pass filter color character Color hexadecimal format, defaults black scale integer Scale x data.table object serves header table","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Table — header_table","text":"header_table object extension data.table class. contains adaptation function arguments, allowing compatibility WFDB class.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Table — header_table","text":"header_table object relatively complex directly deals properties signal, allows compatibility WFDB files raw header files signal objects. can written using write_wfdb().","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"header-file-structure","dir":"Reference","previous_headings":"","what":"Header file structure","title":"Header Table — header_table","text":"three components header file: Record line contains following information, order documented, however pieces may missing based different parameters. left right... Record name Number signals: represents number segments/channels Sampling frequency (optional) Number samples (optional) Time: HH:MM:SS format (optional) Date: DD/MM/YYYY (optional) Signal specification lines contains specifications individual signals, must many signal lines reported record line. left right.... File name: usually *.dat Format integer: represents storage type, e.g. 8-bit 16-bit ADC gain: ADC units per physical unit (optional) Baseline: corresponds 0 physical units, sep = '*(0)\" (optional) Units: '/' field separator e.g '*/mV' (optional) ADC resolution integer: bits, usually 8 16 (optional) ADC zero: represents middle ADC input range (optional) Initial value (optional) Checksum (optional) Block size (optional) Description: text label information (optional) Info strings unstructured lines contains information record. Usually descriptive. Starts initial '#' without preceding white space beginning line.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/interpolate_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to apply interpolation — interpolate_signal","title":"Helper function to apply interpolation — interpolate_signal","text":"Helper function apply interpolation","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/interpolate_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to apply interpolation — interpolate_signal","text":"","code":"interpolate_signal(   original_samples,   original_values,   new_samples,   interpolation_method )"},{"path":"https://shah-in-boots.github.io/EGM/reference/is_windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object is a windowed object — is_windowed","title":"Test if an object is a windowed object — is_windowed","text":"Test object windowed object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/is_windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object is a windowed object — is_windowed","text":"","code":"is_windowed(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/is_windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object is a windowed object — is_windowed","text":"x object test","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/is_windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an object is a windowed object — is_windowed","text":"TRUE x windowed object, FALSE otherwise","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lapply.windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of a windowed object — lapply.windowed","title":"Apply a function to each element of a windowed object — lapply.windowed","text":"Apply function element windowed object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lapply.windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of a windowed object — lapply.windowed","text":"","code":"lapply.windowed(X, FUN, ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/lapply.windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each element of a windowed object — lapply.windowed","text":"X windowed object FUN function apply element ... Additional arguments passed FUN","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lapply.windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each element of a windowed object — lapply.windowed","text":"list results applying FUN element X, new windowed object results egm objects","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG data from MUSE — muse","title":"Read in ECG data from MUSE — muse","text":"function serves read/convert XML based files MUSE system digital signal. can subsequently written formats. MUSE system somewhat proprietary, version may may allow export options XML.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG data from MUSE — muse","text":"","code":"read_muse(file)"},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG data from MUSE — muse","text":"file ECG file MUSE XML format","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG data from MUSE — muse","text":"egm class object list eps signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in ECG data from MUSE — muse","text":"GE Healthcare MUSE v9 currently model used. functions tested older versions.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/print.windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a windowed object — print.windowed","title":"Print a windowed object — print.windowed","text":"Print windowed object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/print.windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a windowed object — print.windowed","text":"","code":"# S3 method for class 'windowed' print(x, ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/print.windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a windowed object — print.windowed","text":"x windowed object ... Additional arguments passed methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/print.windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a windowed object — print.windowed","text":"Invisibly returns x","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Prucka System Files — prucka","title":"Read Prucka System Files — prucka","text":"read_prucka() reads signal data (.txt) header information (.inf) exported Prucka cardiac electrophysiology system, underlying recording software used GE Healthcare's CardioLab EP system.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Prucka System Files — prucka","text":"","code":"read_prucka(signal_file, header_file = NULL, n = Inf)  read_prucka_header(header_file)  read_prucka_signal(signal_file, n = Inf)"},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Prucka System Files — prucka","text":"signal_file Path *.txt signal data file header_file Path *.inf header file. NULL, look file base name signal_file .inf extension. n Number signal values return (channel data). Defaults values.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Prucka System Files — prucka","text":"egm class object list EP signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"exporting-from-ge-cardiolab-prucka","dir":"Reference","previous_headings":"","what":"Exporting from GE CardioLab/Prucka","title":"Read Prucka System Files — prucka","text":"export data GE CardioLab system: Open study/recording CardioLab Select time segment want export Navigate File > Export Tools > Export Choose ASCII Export Text Export format Select channels export Choose export location filename system create two files: X####.txt: Space-delimited signal data X####.inf: Header file metadata","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"file-format-details","dir":"Reference","previous_headings":"","what":"File Format Details","title":"Read Prucka System Files — prucka","text":"Signal file (*.txt): Space-delimited numeric data row represents one time point First column: sample index/time marker Subsequent columns: channel data mV channels sampled rate Header file (*.inf): Key-value pairs \"=\" delimiter Patient information (name, date, description) Recording parameters (sampling rate, duration, channel count) Channel mapping section listing channel numbers labels Channel numbers may non-sequential (e.g., 1-12, 49-50, 75-76) files must base name (e.g., X001.txt X001.inf).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/prucka.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Read Prucka System Files — prucka","text":"Default units mV electrical signals mmHg pressure system typically uses 16-bit ADC resolution Channel labels may include surface ECG leads (, II, III, aVR, aVL, aVF, V1-V6) intracardiac catheters (ABL, , CS, RV, etc.) Export may limited system memory long recordings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Segmentation of electrical signal by wave specifications — segmentation","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Segmentation electrical signal wave specifications","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"","code":"segmentation(   object,   by = \"sinus\",   pad = \"before\",   pad_length = 0L,   center = NULL )  segment_by_sinus(object)  pad_sequence(object, pad, pad_length)  center_sequence(object, center, pad_length)"},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"object Object egm class, includes header, signal information, annotation information. character string naming waveform type segment . Options include following: sinus = call segment_by_sinus() egm object pad character String specify side sequence pad (). Options include c(\"\", \"\", \"\"). Default . center used, argument ignored. pad_length Offers padding segmented beats maximum length, integer. default 0L, means padding applied. pad > 0 add baseline value (specified within header signal) either signal. can also choose center sequence, also occur pad > 0. .e., pad = 500 segmented object increased max length 500. maximum size larger padding size, warning issued sequence truncated. center single Roman alphabetic letter character utilizes annotations given egm object center sequence. found type variable annotation table. example, sinus waveforms annotated c(\"P\", \"R\", \"T\") peak, center around R. occur pad > 0L. case-insensitive. amount padding determined pad_length argument","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Returns list egm objects. item segmentation egm, using selected channels (available). attempt optimize pick best annotations help create consistencies signal channels possible.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Requires 12-lead ECG digitized, input egm object. object must annotation file associated contains demarcation annotations. Please see approaches based annotation type. Current, following supported: sinus = supports using ecgpuwave annotator","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"sinus-beat-segmentation","dir":"Reference","previous_headings":"","what":"Sinus beat segmentation","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Identify individual sinus beats surface ECG extract individual beats, returning list sinus beats form egm class. consistent P, R, T wave amongst channels. channel , example, visible T wave, still label information gained channels. based algorithm annotation tool named ecgpuwave. Please see read_annotation() details.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal tables — signal_table","title":"Signal tables — signal_table","text":"signal_table() function modifies data.table class work electrical signal data. input data set equal number rows. add column index positions called sample already exist.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal tables — signal_table","text":"","code":"signal_table(...)  is_signal_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal tables — signal_table","text":"... list equal lengths x data.frame data frame signal data","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal tables — signal_table","text":"object class signal_table, extension data.table class. sample column invariant always present. columns represent additional channels.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize windows of signal data — standardize_windows","title":"Standardize windows of signal data — standardize_windows","text":"Standardizes windowed objects applying various transformations window. function converts egm object windowed list standardized data frame uniform properties, facilitating comparison analysis.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize windows of signal data — standardize_windows","text":"","code":"standardize_windows(   x,   standardization_method = c(\"time_normalize\"),   target_samples = 500,   target_ms = NULL,   interpolation_method = c(\"linear\", \"spline\", \"step\"),   align_feature = NULL,   preserve_amplitude = TRUE,   preserve_class = FALSE,   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize windows of signal data — standardize_windows","text":"x windowed object standardize standardization_method character string specifying standardization method. Currently supported: \"time_normalize\". target_samples desired number samples standardized window. Default 500 samples. parameter takes precedence target_samples target_ms provided. target_ms Alternative specification milliseconds. provided target_samples NULL, function convert samples based signal's sampling frequency. interpolation_method method used interpolation resampling. Options \"linear\" (default), \"spline\", \"step\". align_feature Feature align windows around, either character string matching annotation type list criteria finding specific annotation. Default NULL (alignment). preserve_amplitude Logical. TRUE (default), maintains original amplitude range resampling. preserve_class Logical. TRUE, returns windowed object standardized data frames. FALSE (default), returns plain list data frames. ... Additional arguments passed specific standardization methods.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize windows of signal data — standardize_windows","text":"preserve_class=TRUE, windowed object containing standardized data frames. preserve_class=FALSE, plain list standardized data frames.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize windows of signal data — standardize_windows","text":"Currently supported standardization methods: time_normalize - Resamples window standard length either dilating contracting signal. result signal consistent number samples regardless original window duration. Additional options: align_feature - provided, windows aligned center around feature (e.g., specific annotation type like \"N\" R-peak). Can character string matching annotation type list criteria annotation matching. preserve_amplitude - TRUE (default), maintains original amplitude range resampling. FALSE, amplitudes may change due interpolation.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/standardize_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize windows of signal data — standardize_windows","text":"","code":"if (FALSE) { # \\dontrun{ # Read in ECG data ecg <- read_wfdb(\"ecg\", test_path(), \"ecgpuwave\")  # Create windows based on sinus rhythm windows <- window_signal(   ecg,   method = \"rhythm\",   rhythm_type = \"sinus\",   onset_criteria = list(type = \"(\", number = 0),   offset_criteria = list(type = \")\", number = 2),   reference_criteria = list(type = \"N\") )  # Standardize windows to exactly 500 samples std_windows <- standardize_windows(   windows,   method = \"time_normalize\",   target_samples = 500 )  # Alternatively, standardize to 500 milliseconds (depends on sampling frequency) std_windows_ms <- standardize_windows(   windows,   method = \"time_normalize\",   target_ms = 500 )  # Standardize windows with QRS alignment aligned_windows <- standardize_windows(   windows,   method = \"time_normalize\",   target_samples = 500,   align_feature = \"N\"  # Align on QRS complexes ) } # }"},{"path":"https://shah-in-boots.github.io/EGM/reference/sub-.windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a windowed object — [.windowed","title":"Subset a windowed object — [.windowed","text":"Subset windowed object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/sub-.windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a windowed object — [.windowed","text":"","code":"# S3 method for class 'windowed' x[i, ...]"},{"path":"https://shah-in-boots.github.io/EGM/reference/sub-.windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a windowed object — [.windowed","text":"x windowed object Index subset ... Additional arguments passed methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/sub-.windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a windowed object — [.windowed","text":"windowed object specified subset elements","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/time_normalize_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Time normalize windows to a standard length — time_normalize_windows","title":"Time normalize windows to a standard length — time_normalize_windows","text":"Time normalize windows standard length","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/time_normalize_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time normalize windows to a standard length — time_normalize_windows","text":"","code":"time_normalize_windows(   x,   target_samples = 500,   target_ms = NULL,   interpolation_method = \"linear\",   align_feature = NULL,   preserve_amplitude = TRUE,   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/validate_ecg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that signal data represents a standard 12-lead ECG — validate_ecg_data","title":"Validate that signal data represents a standard 12-lead ECG — validate_ecg_data","text":"Validate signal data represents standard 12-lead ECG","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/validate_ecg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that signal data represents a standard 12-lead ECG — validate_ecg_data","text":"","code":"validate_ecg_data(signal, header)"},{"path":"https://shah-in-boots.github.io/EGM/reference/validate_ecg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that signal data represents a standard 12-lead ECG — validate_ecg_data","text":"signal signal_table object header header_table object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/validate_ecg_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that signal data represents a standard 12-lead ECG — validate_ecg_data","text":"TRUE valid, throws error otherwise","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Waveform Database (WFDB) Software Package — wfdb","title":"Waveform Database (WFDB) Software Package — wfdb","text":"implementation WFDB back-end WFDB using combination python, C++, C language. related functions documented separately. serves overview conversion WFDB formats R formats. documentation, specific WFDB generated files described.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waveform Database (WFDB) Software Package — wfdb","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"wfdb","dir":"Reference","previous_headings":"","what":"WFDB","title":"Waveform Database (WFDB) Software Package — wfdb","text":"WFDB (Waveform Database) Software Package developed past thirty years, providing large collection software processing analyzing physiological waveforms. package written highly portable C can used popular platforms, including GNU/Linux, MacOS X, MS-Windows, versions Unix. foundation WFDB Software Package WFDB library, consisting set functions reading writing digitized signals annotations. functions can used programs written C, C++, Fortran, running operating system ANSI/ISO C compiler available, including versions Unix, MS-DOS, MS-Windows, Macintosh OS, VMS.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data format","title":"Waveform Database (WFDB) Software Package — wfdb","text":"records WFDB uses three components... Signals: integer values equal intervals certain sampling frequency Header attributes: recording information sample number, gain, sampling frequency Annotations: information record beat labels alarm triggers","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Waveform Database (WFDB) Software Package — wfdb","text":"Original software: George Moody, Tom Pollard, Benjamin Moody  R implementation: Anish S. Shah  Last updated: 2025-10-13","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Read WFDB-compatible annotation file — wfdb_annotations","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"Individual annotation types described command-line tool annotating WFDB-files, well extension appended record name notate type. Generally, types annotations supported described : atr = manually reviewed corrected reference annotation files ann = general annotator file ecgpuwave = files contain surface ECG demarcation (P, QRS, T waves) sqrs/wqrs/gqrs = standard WFDB peak detection R waves thorough explanation given details. Additionally, files read converted binary format textual format. raw data however may inadequate, original annotation may erroneous. cases, empty annotation_table object returned.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"","code":"read_annotation(   record,   record_dir = \".\",   annotator,   wfdb_path = getOption(\"wfdb_path\"),   begin = \"00:00:00\",   end = NA_character_,   ... )  write_annotation(   data,   annotator,   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   ... )  annotate_wfdb(   record,   record_dir,   annotator,   wfdb_path = getOption(\"wfdb_path\"),   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') begin, end character format HH:MM:SS used help parse time annotation. parameters together create time range extract. default 0 shortcut 00:00:00. seconds argument can include decimal place. ... Additional arguments passed function data annotation_table containing 6 invariant columns required annotation_table() function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"function either read annotation using read_annotation() function format annotation_table object, write file/disk annotation_table WFDB-compatible annotation file using write_annotation() function. IMPORTANT: annotation files created annotators developed independently, higher chance erroroneous file created disk. , function note error return empty annotation_table times.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"annotation-files","dir":"Reference","previous_headings":"","what":"Annotation files","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"following annotation file types described .","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"ecgpuwave","dir":"Reference","previous_headings":"","what":"ecgpuwave","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"ecgpuwave analyzes ECG signal specified record, detecting QRS complexes locating beginning, peak, end P, QRS, ST-T waveforms. output ecgpuwave written standard WFDB-format annotation file (extension \"*.ecgpuwave\", expected). file can converted text format using rdann. details given ECGPUWAVE page. type column can p, t, N peak P wave, T wave, QRS (R peak) directly. output notation also includes waveform onset XXX waveform offset XXX. number column gives information type labels. number column gives modifier information. type classifier T wave annotation, number column can 0 (normal), 1 (inverted), 2 (positive), 3 (negative), 4 (biphasic negative-positive), 5 (biphasic positive-negative). type waveform onset offset, number can 0 (P wave), 1 (QRS complex), 2 (T wave).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":null,"dir":"Reference","previous_headings":"","what":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"function allows WFDB files read WFDB-compatible system, also allows writing WFDB-compatible files specific EP recording systems, indicated details section. Writing WFDB leads creation dat (signal) hea (header) file. required reading files well.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"","code":"write_wfdb(   data,   record,   record_dir,   wfdb_path = getOption(\"wfdb_path\"),   header = list(frequency = 250, gain = 200L, label = character()),   info_strings = list(),   ... )  read_wfdb(   record,   record_dir = \".\",   annotator = NA_character_,   wfdb_path = getOption(\"wfdb_path\"),   begin = 0,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_signal(   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   begin = 0L,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_header(record, record_dir = \".\", wfdb_path = getOption(\"wfdb_path\"), ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"data Can either egm object, data.frame (similar) object. function appropriately set defaults based type. egm = extract signal header data directly object, thus simplest convert WFDB format signal_table = customized data.table class invariant column containing sample information. data.frame data.table = Must column represents time point index, columns represent signal values (preferably integers) record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') header header file optional named list parameters used organize describe signal input data argument. type given, specific additional elements searched , low high pass filters, colors, signal attributes. minimum, following elements required (calculated): frequency = sample frequency Hertz integer label = vector names channel character start_time = date/time object info_strings list strings written appendix header file, usually containing information channels, (e.g. list colors, extra labels, etc). ... Additional arguments passed function annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. begin, end, interval Timepoint integer (representing seconds), converted index position based sampling frequency. default start beginning record. end interval given, earlier two returned. end argument gives time index read . interval argument length time past start point. units character string representing either digital (DEFAULT) physical units used, available. digital = Index sample number, signal integers (/D units) physical = Index elapsed time, signal decimal voltage (e.g. mV). include 1 additional row header/column names describes units channels Either signal/channel character vector name number. Allows duplication signal re-order signal needed. nothing given, default channels available.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"Depends reading writing function. writing, output WFDB-based object reflecting function. reading, output extension data.table object reflecting underlying function (e.g. signal_table() return object class).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"write_wfdb(): Writes signal header data WFDB-compatible format R. read_wfdb(): Reads multicomponent WFDB-formatted set files directly egm object. serves pull together read_signal(), read_header(), read_annotation() simplicity. read_signal(): Specifically reads signal data WFDB binary format, returning signal_table object evaluation R environment read_header(): Specifically reads header data WFDB header text format, returning header_table object evaluation R environment","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"recording-systems","dir":"Reference","previous_headings":"","what":"Recording systems","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"Type signal data, specified recording system, currently supported. bard = Bard (LabSystem Pro), e.g. read_bard() muse = MUSE (GE), e.g. read_muse() prucka = Prucka (CardioLab), e.g. read_prucka()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"WFDB path utilities — wfdb_paths","title":"WFDB path utilities — wfdb_paths","text":"functions used help find locate commands installation WFDB. helpful setting getting path options specific WFDB commands. primarily internal helper functions, documented troubleshooting purposes.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WFDB path utilities — wfdb_paths","text":"","code":"find_wfdb_software()  set_wfdb_path(.path)  find_wfdb_command(.app, .path = getOption(\"wfdb_path\"))"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WFDB path utilities — wfdb_paths","text":".path character string describes path WFDB binary directory .app name WFDB software command application character","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WFDB path utilities — wfdb_paths","text":"functions helper functions work user-installed WFDB software. always return object, primarily used side effects. primarily developer functions, exposed user help troubleshoot issues installation WFDB.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/window.html","id":null,"dir":"Reference","previous_headings":"","what":"Window signal data based on different methods — window","title":"Window signal data based on different methods — window","text":"Creates windows signal data using various methods, rhythm patterns, time intervals, reference points. window returned individual egm object analysis.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Window signal data based on different methods — window","text":"","code":"window(object, window_method = c(\"rhythm\"), ...)  window_by_rhythm(   object,   rhythm_type = \"sinus\",   onset_criteria,   offset_criteria,   reference_criteria = NULL,   adjust_sample_indices = TRUE,   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Window signal data based on different methods — window","text":"object Object egm class, includes header, signal information, annotation information. window_method character string specifying windowing method. Options include: rhythm - Windows based rhythm patterns (requires rhythm_type criteria) ... Additional arguments passed specific windowing methods. rhythm_type character string specifying rhythm type (e.g., \"sinus\"). Currently supported: \"sinus\" (requires reference check). onset_criteria named list criteria identify onset points. Names match column names annotation table. offset_criteria named list criteria identify offset points. Names match column names annotation table. reference_criteria named list criteria identify reference points must exist onset offset. Set NULL skip reference validation. adjust_sample_indices Logical, whether adjust annotation sample indices returned windows relative window start. Default TRUE.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Window signal data based on different methods — window","text":"list egm objects, representing window original signal.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Window signal data based on different methods — window","text":"function provides modular approach windowing electrophysiological signals. method parameter determines windowing strategy, method requiring set additional parameters.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/windowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a windowed object containing a list of egm segments — windowed","title":"Create a windowed object containing a list of egm segments — windowed","text":"windowed objects lists egm objects represent segments windows original signal. allows specialized methods applied collections signal windows. function primarily serves class generation function, applies class attributes. used window() function ensure appropriate class properties.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/windowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a windowed object containing a list of egm segments — windowed","text":"","code":"windowed(   x = list(),   window_method = \"rhythm\",   source_record = character(),   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/windowed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a windowed object containing a list of egm segments — windowed","text":"x list egm objects window_method windowing method used create list source_record name original record ... Additional arguments passed methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/windowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a windowed object containing a list of egm segments — windowed","text":"object class windowed inherits list","code":""},{"path":"https://shah-in-boots.github.io/EGM/news/index.html","id":"egm-development-version","dir":"Changelog","previous_headings":"","what":"EGM (development version)","title":"EGM (development version)","text":"Updates pkgdown settings documentation organization Debugging color issues adding color theme ggm() Creation subclass egm objects called ecg identify 12-lead ECG subtypes","code":""},{"path":"https://shah-in-boots.github.io/EGM/news/index.html","id":"egm-011","dir":"Changelog","previous_headings":"","what":"EGM 0.1.1","title":"EGM 0.1.1","text":"updated release CRAN package. changes version follows. Update ggm() function allow appropriate theming dark light color themes (removes issues importing colors) Update code testing suite assess compatibility ggplot2 v4.0.0 release Addition series functions F wave extraction analysis Addition rudimentary functions windowing signal based surface ECG New function read Prucka (CardioLab) EP study recordings read_prucka() function","code":""},{"path":"https://shah-in-boots.github.io/EGM/news/index.html","id":"egm-010","dir":"Changelog","previous_headings":"","what":"EGM 0.1.0","title":"EGM 0.1.0","text":"CRAN release: 2024-05-23 first CRAN release package. initial version contains key features working intracardiac electrograms (EGM) surface electrocardiograms (ECG), visualizing signals, working annotations stored WFDB format. single, major class introduced . signal_table contains raw signal data header_table contains meta-data signal data annotation_table identifies samples labels specific annotations Additional /O features introduced work data stored WFDB format: read_wfdb() reads WFDB data returns egm object write_wfdb() writes egm object WFDB-compatible format first version also allows working ECG EGM data using: read_muse() ECG data (GE MUSE, v9) read_lspro() EGM data (LabSystem Pro)","code":""}]
