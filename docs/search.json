[{"path":"https://shah-in-boots.github.io/EGM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021-2024 Anish S. Shah, MD, MS Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shah-in-boots.github.io/EGM/articles/getting-started.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in Data","title":"Getting Started","text":"Thie software supports reading certain types raw cardiac electric signal currently. includes intracardiac extracardiac data. Please see read_muse() read_lspro() examples. additional formats requested, please file issue provide sample file (primarily requires signal, whatever format, meta-information individual channels). simple example taking MUSE XML file converting digital signal. tested 9th version MUSE XML format.  Similarly, intracardiac recordings obtained LSPro can read well. function documents generally work.","code":"# Read in data fp <- system.file('extdata', 'muse-sinus.xml', package = 'EGM') xml <- readLines(fp) head(xml) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\" #> [2] \"<!DOCTYPE RestingECG SYSTEM \\\"restecg.dtd\\\">\"    #> [3] \"<RestingECG>\"                                    #> [4] \"   <MuseInfo>\"                                   #> [5] \"      <MuseVersion>9.0.10.18530<\/MuseVersion>\"   #> [6] \"   <\/MuseInfo>\"  # Instead, can read this in as a MUSE XML file # Now as an `egm` class ecg <- read_muse(fp) ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  # Can now plot this easily ggm(ecg) +    theme_egm_light() # Read in data fp <- system.file('extdata', 'lspro-avnrt.txt', package = 'EGM') lspro <- readLines(fp) head(lspro, n = 20) #>  [1] \"[Header]\"                  \"File Type: 1\"              #>  [3] \"Version: 2\"                \"Channels exported: 11\"     #>  [5] \"Samples per channel: 3522\" \"Start time: 15:17:57\"      #>  [7] \"End time: 15:18:01\"        \"Ch. Info. Pointer: 320\"    #>  [9] \"Stamp Data: C\"             \"Mux format: 0\"             #> [11] \"Mux Block Size: \"          \"Data Format 1\"             #> [13] \"Sample Rate: 1000Hz\"       \"Channel #:   1\"            #> [15] \"Label: I\"                  \"Range: 5mv \"               #> [17] \"Low: .5Hz\"                 \"High: 100Hz\"               #> [19] \"Sample rate: 1000Hz\"       \"Color: FFFFFF\"  # Instead, read this as signal, breaking apart header and signal data # Presented as an `egm` class object egram <- read_lspro(fp) egram #> <Electrical Signal> #> ------------------- #> Recording Duration:  3.522 seconds #> Recording frequency  1000  hz #> Number of channels:  11  #> Channel Names:  I III V1 CS 1-2 CS 3-4 CS 5-6 CS 7-8 CS 9-10 HIS D HIS M RV 1-2  #> Annotation:  # Similarly, can be visualized with ease ggm(egram, channels = c('HIS', 'CS', 'RV'), mode = NULL) +     theme_egm_dark()"},{"path":"https://shah-in-boots.github.io/EGM/articles/getting-started.html","id":"class-introduction","dir":"Articles","previous_headings":"","what":"Class Introduction","title":"Getting Started","text":"EGM package introduces specific data-oriented class called egm (note lower-case spelling compared package name). class primary data structure, allows compatibility within multiple signal types, including reading WFDB-formatted data. class, everything can written well - preferred option stated WFDB format.","code":""},{"path":"https://shah-in-boots.github.io/EGM/articles/intro-egm.html","id":"surface-recordings","dir":"Articles","previous_headings":"","what":"Surface recordings","title":"Introduction to the EGM Class","text":"simple example taking MUSE XML file converting digital signal.","code":"# Read in data fp <- system.file('extdata', 'muse-sinus.xml', package = 'egm') xml <- readLines(fp) head(xml) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\" #> [2] \"<!DOCTYPE RestingECG SYSTEM \\\"restecg.dtd\\\">\"    #> [3] \"<RestingECG>\"                                    #> [4] \"   <MuseInfo>\"                                   #> [5] \"      <MuseVersion>9.0.10.18530<\/MuseVersion>\"   #> [6] \"   <\/MuseInfo>\"  # Instead, can read this in as a MUSE XML file # Now as an `egm` class ecg <- read_muse(fp) ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  # Can now plot this easily ggm(ecg)"},{"path":"https://shah-in-boots.github.io/EGM/articles/intro-egm.html","id":"intracardiac-recordings","dir":"Articles","previous_headings":"","what":"Intracardiac recordings","title":"Introduction to the EGM Class","text":"signal now comes LSPro data.","code":"# Read in data fp <- system.file('extdata', 'lspro-avnrt.txt', package = 'egm') lspro <- readLines(fp) head(lspro, n = 20) #>  [1] \"[Header]\"                  \"File Type: 1\"              #>  [3] \"Version: 2\"                \"Channels exported: 11\"     #>  [5] \"Samples per channel: 3522\" \"Start time: 15:17:57\"      #>  [7] \"End time: 15:18:01\"        \"Ch. Info. Pointer: 320\"    #>  [9] \"Stamp Data: C\"             \"Mux format: 0\"             #> [11] \"Mux Block Size: \"          \"Data Format 1\"             #> [13] \"Sample Rate: 1000Hz\"       \"Channel #:   1\"            #> [15] \"Label: I\"                  \"Range: 5mv \"               #> [17] \"Low: .5Hz\"                 \"High: 100Hz\"               #> [19] \"Sample rate: 1000Hz\"       \"Color: FFFFFF\"  # Instead, read this as signal, breaking apart header and signal data # Presented as an `egm` class object egm <- read_lspro(fp) egm #> <Electrical Signal> #> ------------------- #> Recording Duration:  3.522 seconds #> Recording frequency  1000  hz #> Number of channels:  11  #> Channel Names:  I III V1 CS 1-2 CS 3-4 CS 5-6 CS 7-8 CS 9-10 HIS D HIS M RV 1-2  #> Annotation:  # Similarly, can be visualized with ease ggm(egm, channels = c('HIS', 'CS', 'RV'), mode = NULL) +     theme_egm_dark()"},{"path":"https://shah-in-boots.github.io/EGM/articles/intro-segmentation.html","id":"sinus-rhythm","dir":"Articles","previous_headings":"","what":"Sinus rhythm","title":"Introduction to Signal Segmentation","text":"initial approach use sinus rhythm, can easily evaluated using rule-based approach: \\(QRS_{}\\) (index QRS complex) \\(QRS_{+1}\\) (following QRS complex), must T wave \\(QRS_{}\\) \\(QRS_{-1}\\) (previous QRS complex), must P wave ≥ 1 additional depolarization signals \\(P_{}\\) \\(QRS_{}\\) file represent ECG data set obtained MUSE v9 contains 12-leads data 10 seconds.","code":"ecg <- read_wfdb(record = 'muse-sinus',                  record_dir = system.file('extdata', package = 'egm'),                  annotator = 'ecgpuwave') # Example data ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  ecgpuwave # Visualize g <-     ggm(object) |>     draw_boundary_mask()  # Should create a number of high likelihood sinus beats beats <- segment_sinus_beats(object) expect_length(beats, 11) expect_equal(nrow(beats[[1]]$signal), 263) # Checked the size of the 1st beat"},{"path":"https://shah-in-boots.github.io/EGM/articles/segmentation-guide.html","id":"sinus-rhythm","dir":"Articles","previous_headings":"","what":"Sinus rhythm","title":"Signal Segmentation","text":"initial approach use sinus rhythm, can easily evaluated using rule-based approach: \\(QRS_{}\\) (index QRS complex) \\(QRS_{+1}\\) (following QRS complex), must T wave \\(QRS_{}\\) \\(QRS_{-1}\\) (previous QRS complex), must P wave ≥ 1 additional depolarization signals \\(P_{}\\) \\(QRS_{}\\) file represent ECG data set obtained MUSE v9 contains 12-leads data 10 seconds.","code":"ecg <- read_wfdb(record = 'muse-sinus',                  record_dir = system.file('extdata', package = 'egm'),                  annotator = 'ecgpuwave') # Example data ecg"},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb-guide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"WFDB: An Introduction to the Waveform Database Software Package","text":"install WFDB software traditional, C-based format, found easiest teh instructions Github source. installation instructions relatively clear across multiple operating systems. WFDB easiest install Unix-based system, Linux MacOS. Windows, found using WSL2 consistent supported way utilize software. hidden WSL, path must specified explicitly using set_wfdb_path() function using command Powershell, example, switch WSL command environment. place, able work WFDB files directly R without significant overhead costs, also gaining access variety software applications.","code":"set_wfdb_path(\"wsl /usr/local/bin\")"},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb-guide.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"WFDB: An Introduction to the Waveform Database Software Package","text":"WFDB software package utilizes binary format store annotations. Annotations essentially markers qualifiers specific components signal, specifying specific time position plot, channel annotation refers . Annotations polymorphic, multiple can applied single signal dataset. credit work goes directly original software creators, just wrapper allow flexible integration R. begin, let’s take example simple ECG dataset. data included package, can accessed .  may customized software, manual approaches, machine learning models may label signal data. can use annotation_table() function create WFDB-compatible annotations, updating egm object written file. trial , let’s label peaks QRS complex 12-lead ECG. Create quick, non-robust function labeling QRS complex peaks. function pracma::findpeaks() quite good, avoid dependencies writing . Evaluate fit peaks dataset Place annotations table, updating egm object Plot results  result bad simple peak finder, lets us generate small dataset annotations can used. Please see additional vignettes advanced annotation options, multichannel plots, multichannel annotations. can take look hood annotation positions generated. relevant arguments, displayed , include: annotator: name annotation function creator time: constructed sample number frequency sample: integer index positions type: single character describing type subtype: single character describing type channel: channel data mapped number: additional qualifier annotation type","code":"fp <- system.file('extdata', 'muse-sinus.xml', package = 'EGM') ecg <- read_muse(fp) fig <- ggm(ecg) + theme_egm_light() fig # Let x = 10-second signal dataset # We will apply this across the dataset # This is an oversimplified approach. find_peaks <- function(x,                        threshold =                           mean(x, na.rm = TRUE) + 2 * sd(x, na.rm = TRUE)                        ) {      # Ensure signal is \"positive\" for peak finding algorithm   x <- abs(x)      # Find the peaks   peaks <- which(diff(sign(diff(x))) == -2) + 1      # Filter the peaks   peaks <- peaks[x[peaks] > threshold]      # Return   peaks }  # Create a signal dataset dat <- extract_signal(ecg)  # Find the peaks sig <- dat[[\"I\"]] pk_loc <- find_peaks(sig) pk_val <- sig[pk_loc] pks <- data.frame(x = pk_loc, y = pk_val)  # Plot them plot(sig, type = \"l\") points(x = pks$x, y = pks$y, col = \"orange\") # Find the peaks raw_signal <- dat[[\"I\"]] peak_positions <- find_peaks(raw_signal) peak_positions #>  [1]   96  427  759 1091 1753 2085 2417 2750 3080 3412 3744 4076 4409  # Annotations do not need to store the value at that time point however # The annotation table function has the following arguments args(annotation_table) #> function (annotator = character(), time = character(), sample = integer(),  #>     frequency = integer(), type = character(), subtype = character(),  #>     channel = integer(), number = integer(), ...)  #> NULL  # We can fill this in as below using additional data from the original ECG hea <- ecg$header start <- attributes(hea)$record_line$start_time hz <- attributes(hea)$record_line$frequency  ann <- annotation_table(   annotator = \"our_pks\",   sample = peak_positions,   type = \"R\",   frequency = hz,   channel = \"I\" )  # Here are our annotations ann #> <annotation_table: 13 `our_pks` annotations> #>             time sample   type subtype channel number #>           <char>  <num> <char>  <char>  <char>  <int> #>  1: 00:00:00.192     96      R               I      0 #>  2: 00:00:00.854    427      R               I      0 #>  3: 00:00:01.518    759      R               I      0 #>  4: 00:00:02.182   1091      R               I      0 #>  5: 00:00:03.506   1753      R               I      0 #>  6:  00:00:04.17   2085      R               I      0 #>  7: 00:00:04.834   2417      R               I      0 #>  8:   00:00:05.5   2750      R               I      0 #>  9:  00:00:06.16   3080      R               I      0 #> 10: 00:00:06.824   3412      R               I      0 #> 11: 00:00:07.488   3744      R               I      0 #> 12: 00:00:08.152   4076      R               I      0 #> 13: 00:00:08.818   4409      R               I      0  # Then, add this back to the original signal ecg$annotation <- ann ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  our_pks"},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb.html","id":"introduction-to-wfdb","dir":"Articles","previous_headings":"","what":"Introduction to WFDB","title":"Guide to WFDB","text":"physionet WFDB","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb.html","id":"macos-and-unix-like-systems","dir":"Articles","previous_headings":"Installation","what":"MacOS and Unix-like systems","title":"Guide to WFDB","text":"Root","code":""},{"path":"https://shah-in-boots.github.io/EGM/articles/wfdb.html","id":"windows","dir":"Articles","previous_headings":"Installation","what":"Windows","title":"Guide to WFDB","text":"WSL2 Cygwin","code":""},{"path":"https://shah-in-boots.github.io/EGM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anish S. Shah. Author, maintainer, copyright holder.","code":""},{"path":"https://shah-in-boots.github.io/EGM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shah (2024). EGM: Evaluating Cardiac Electrophysiology Signals. R package version 0.1.0, https://shah--boots.github.io/EGM/.","code":"@Manual{,   title = {EGM: Evaluating Cardiac Electrophysiology Signals},   author = {Anish S. Shah},   year = {2024},   note = {R package version 0.1.0},   url = {https://shah-in-boots.github.io/EGM/}, }"},{"path":"https://shah-in-boots.github.io/EGM/index.html","id":"egm","dir":"","previous_headings":"","what":"Evaluating Cardiac Electrophysiological Signals","title":"Evaluating Cardiac Electrophysiological Signals","text":"purpose EGM work electrophysiology (EP) signal data help understand simplify complexity complex, multi-channel electrical signal data. target audience working, particular, cardiac electrophysiology data, intracardiac electrograms surface electrocardiography. package heavily inspired gains additional functionality Waveform Database (WFDB) software package. goals major arms software … Adapt WFDB-compatible signal data R format interchangeable Provide simple visualization tools work short elements raw signal data Allow annotation intracardiac electrograms interactive manner Train allow development learning algorithms evaluation multi-channel time series data Please see vignettes details usage.","code":""},{"path":"https://shah-in-boots.github.io/EGM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Evaluating Cardiac Electrophysiological Signals","text":"can install released version EGM CRAN : development version GitHub : Notably, package software utilizes WFDB software available. can expect errors calling commands software appropriately installed. installation instructions available Github site.","code":"install.packages(\"EGM\") # install.packages(\"devtools\") devtools::install_github(\"shah-in-boots/EGM\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add color scheme to a ggm object — add_colors","title":"Add color scheme to a ggm object — add_colors","text":"Using add_colors() part theme process ggm object, turn visual representation egm object. Often, egm dataset contain default colors based signal data brought . add_colors() can allow customization features degree based opinionated color palettes.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add color scheme to a ggm object — add_colors","text":"","code":"add_colors(object, palette, mode)"},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add color scheme to a ggm object — add_colors","text":"object ggm object palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add color scheme to a ggm object — add_colors","text":"Returns updated ggm object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add color scheme to a ggm object — add_colors","text":"Currently, color choices individual decided based channel source (e.g. lead) inspired modern palettes. eventual goal function accept multitude palette options using heuristics similar found {ggplot2} graphing packages.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Add intervals — add_intervals","title":"Add intervals — add_intervals","text":"Add intervals","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add intervals — add_intervals","text":"","code":"add_intervals(object, intervals = TRUE, channel, minimum_interval = 100)"},{"path":"https://shah-in-boots.github.io/EGM/reference/add_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add intervals — add_intervals","text":"intervals choice whether interval data included. annotation channel must present, otherwise nothing plotted. argument allows several choices. TRUE: intervals annotated (default option) integer: integer vector represents indexed intervals annotated. NULL, intervals annotated. example, 5 beats, 4 intervals can labeled. can referenced index, e.g. intervals = c(2) reference 2nd interval 5 beat range.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/add_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add intervals — add_intervals","text":"Returns updated ggm object","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation Table — annotation_table","title":"Annotation Table — annotation_table","text":"annotation_table() modifies data.table class work annotation data. columns equal length, row describes single annotation (although may duplicate time points).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation Table — annotation_table","text":"","code":"annotation_table(   annotator = character(),   time = character(),   sample = integer(),   frequency = integer(),   type = character(),   subtype = character(),   channel = integer(),   number = integer(),   ... )  is_annotation_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation Table — annotation_table","text":"annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. time character time stamp annotation, written format HH:MM:SS.SSS, starting 00:00:00.000. converted appropriate time based header file (records actual start time sampling frequency). often missing variable given compatibility WFDB applications. sample integer representing sample number annotation frequency integer represents sampling frequency Hertz type character string representing type annotation subtype character string representing subtype annotation channel integer representing channel number annotation, character representing channel name number additional integer value number classifies annotation (allows compatibility multiple annotation types) ... Additional arguments passed function x data.table object represents annotation table","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation Table — annotation_table","text":"data.table invariant columns compatible WFDB library. key columns include sample index, type annotation (subtype number qualifier), channel.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation Table — annotation_table","text":"annotation_table() function creates compatible table can used write_annotation() read_annotation() functions.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"annotation-files","dir":"Reference","previous_headings":"","what":"Annotation files","title":"Annotation Table — annotation_table","text":"following annotation file types described .","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotation_table.html","id":"ecgpuwave","dir":"Reference","previous_headings":"","what":"ecgpuwave","title":"Annotation Table — annotation_table","text":"ecgpuwave analyzes ECG signal specified record, detecting QRS complexes locating beginning, peak, end P, QRS, ST-T waveforms. output ecgpuwave written standard WFDB-format annotation file (extension \"*.ecgpuwave\", expected). file can converted text format using rdann. details given ECGPUWAVE page. type column can p, t, N peak P wave, T wave, QRS (R peak) directly. output notation also includes waveform onset XXX waveform offset XXX. number column gives information type labels. number column gives modifier information. type classifier T wave annotation, number column can 0 (normal), 1 (inverted), 2 (positive), 3 (negative), 4 (biphasic negative-positive), 5 (biphasic positive-negative). type waveform onset offset, number can 0 (P wave), 1 (QRS complex), 2 (T wave).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations — annotations","title":"Add annotations — annotations","text":"Annotations labels specific points samples within signal. can semantic, may represent boundary region signal, just individual peak. stored WFDB-compatible annotation file built ggm object.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations — annotations","text":"","code":"draw_boundary_mask(object)"},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the color for a channel based on palettes — color_channels","title":"Identify the color for a channel based on palettes — color_channels","text":"primarily restricts colors color-space safe options. intended used add_colors() provide color scheme ggm object. exposed users custom advanced theming options.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the color for a channel based on palettes — color_channels","text":"","code":"color_channels(x, palette, mode = \"dark\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the color for a channel based on palettes — color_channels","text":"x Vector character names requested ECG EGM leads palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/color_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the color for a channel based on palettes — color_channels","text":"Vector hex code colors character based selected palette light/dark mode","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Theming and color options for ggm objects — colors","title":"Theming and color options for ggm objects — colors","text":"general purpose improve visualization electrical signals. pattern colors generally given different recording software, can replicated help improve visibility.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theming and color options for ggm objects — colors","text":"","code":"theme_egm()  theme_egm_light()  theme_egm_dark()"},{"path":"https://shah-in-boots.github.io/EGM/reference/colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theming and color options for ggm objects — colors","text":"ggm object, inheritance similar ggplot2::theme_minimal()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/describe_wfdb2.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes signals based on WFDB-formatted files — describe_wfdb2","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"Describes signals based WFDB-formatted files","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/describe_wfdb2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"","code":"describe_wfdb2(record, location = \".\")"},{"path":"https://shah-in-boots.github.io/EGM/reference/describe_wfdb2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) location directory target record located within. related PhysioNet, using location name mitdb access online directory MIT Database.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_surface_beats.html","id":null,"dir":"Reference","previous_headings":"","what":"ECG waveform detection — detect_surface_beats","title":"ECG waveform detection — detect_surface_beats","text":"ECG waveform detection","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_surface_beats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECG waveform detection — detect_surface_beats","text":"","code":"detect_surface_beats(   record,   record_dir = \".\",   detector,   wfdb_path = getOption(\"wfdb_path\"),   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_surface_beats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ECG waveform detection — detect_surface_beats","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path')","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_surface_beats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ECG waveform detection — detect_surface_beats","text":"Creates WFDB-compatible annotation file","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/detect_surface_beats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ECG waveform detection — detect_surface_beats","text":"","code":"record <- \"300\" detector <- \"ecgpuwave\""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EGM: Evaluating Cardiac Electrophysiology Signals — EGM-package","title":"EGM: Evaluating Cardiac Electrophysiology Signals — EGM-package","text":"system importing electrophysiological signal, based 'Waveform Database (WFDB)' software package, written Moody et al 2022 doi:10.13026/gjvw-1m31 . wrapper utilizing 'WFDB' functions reading writing signal data, well functions visualization analysis provided. stable broadly compatible class working signal data, supporting reading cardiac electrophysiogical files intracardiac electrograms, introduced.","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/reference/egm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EGM: Evaluating Cardiac Electrophysiology Signals — EGM-package","text":"Maintainer: Anish S. Shah ashah282@uic.edu (ORCID) [copyright holder]","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — EGM-vctrs","title":"Internal vctrs methods — EGM-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":null,"dir":"Reference","previous_headings":"","what":"Electrogram data class from electrophysiology studies — egm","title":"Electrogram data class from electrophysiology studies — egm","text":"class serves combinatorial class describe cardiovascular electrical signal data R. based formats available WFDB, formatted ease use within R ecosystem. egm object contains three components list: signal data multiple channels header information annotation labels specified time points components help navigate, visualize data. egm class backbone working WFDB objects R, provides interface integrating converting raw signal data WFDB format.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electrogram data class from electrophysiology studies — egm","text":"","code":"egm(   signal = signal_table(),   header = header_table(),   annotation = annotation_table(),   ... )  is_egm(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Electrogram data class from electrophysiology studies — egm","text":"signal signal_table object generated signal_table() function header header_table object generated header_table() function annotation annotation_table object generated annotation_table() function ... Additional arguments passed function x egm object, typically generated egm() function, used support functions (e.g. is_egm()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Electrogram data class from electrophysiology studies — egm","text":"object class egm always list three components. Oftentimes, annotation_table object may missing, replaced empty table place holder.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/egm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Electrogram data class from electrophysiology studies — egm","text":"individual components class defined respective children functions signal_table(), header_table(), annotation_table(). simple classes build upon data.table class allow class safety checks working different data types (particularly WFDB). IMPORTANT: egm class can built ground-user, however primarily generated user using read/write functions, read_lspro() read_wfdb().","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract raw signal data from an egm object — extract_signal","title":"Extract raw signal data from an egm object — extract_signal","text":"Raw signal data may required, particularly storing manipulating data, example, feeding analytical pipeline. means extraneous elements, meta information, may unnecessary. function helps strip away extract just signal data channel names.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract raw signal data from an egm object — extract_signal","text":"","code":"extract_signal(object, data_format = c(\"data.frame\", \"matrix\", \"array\"), ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract raw signal data from an egm object — extract_signal","text":"object egm object contains signal data extracted data_format character choice either data.frame (default), matrix, array tells data structured. explanation details. ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract raw signal data from an egm object — extract_signal","text":"object described format option","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/extract_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract raw signal data from an egm object — extract_signal","text":"options return data vary based need. data can extracted follows: data.frame containing equal number rows number samples, column named recording channel derived . Data frames, columnar nature, also include sample index position. matrix containing equal number rows number samples, column named recording channel derived array containing individual vectors signal, named channel derived ","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of EGMs using ggplot — ggm","title":"Visualization of EGMs using ggplot — ggm","text":"ggm() function used plot objects egm class. function however just plotting function - serves visualization tool confirmation patterns, annotations, underlying waveforms data. power , instead geom_*() object, annotations, intervals, measurements can added incrementally.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of EGMs using ggplot — ggm","text":"","code":"ggm(   data,   channels = character(),   time_frame = NULL,   palette = NULL,   mode = \"dark\",   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of EGMs using ggplot — ggm","text":"data Data egm class, includes header (meta) signal information together. channels character vector channels use. Can give either channel label (e.g \"CS 1-2\") recording device/catheter type (e.g \"\" \"ECG\"). channels selected, default channels. time_frame time range displaced given format vector length 2. left value start, right value end time. given seconds (decimals may used). palette character choice options describe color choices used plotting. set default, NULL, changes colors individual channels performed. positive choice made, background mode argument set dark default, unless otherwise specified. WARNING: experimental argument, may moved future version. NULL: changes colors made. DEFAULT. material: colorscheme based Material Design color scheme mode character string c(\"dark\", \"light\") describe base/background color settings used. preset channel colors exported egm object, colors used individual channels. palette specified, dark option set automatically (palette choice made without understanding background plate across). WARNING: experimental argument, may moved future version. dark theme mimics \"white black\" scheme seen LabSystem Pro format (high-contrast visualizations), minimizing eye strain. calls theme_egm_dark() function. DEFAULT. light theme mimics \"black white\" colors seen Prucka system. NULL removes theme, uses default ggplot2::ggplot() settings ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/ggm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of EGMs using ggplot — ggm","text":"{ggplot2} compatible object ggm class, contains additional elements header annotations original data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Table — header_table","title":"Header Table — header_table","text":"header_table() modifies data.table class work header data. header data read similar format WFDB files compatible/interchangeable writing disk. details extensively cover type data input. Generally, function called read_*_header() functions generally called end-user.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Table — header_table","text":"","code":"header_table(   record_name = character(),   number_of_channels = integer(),   frequency = 250,   samples = integer(),   start_time = strptime(Sys.time(), \"%Y-%m-%d %H:%M:%OSn\"),   ADC_saturation = integer(),   file_name = character(),   storage_format = 16L,   ADC_gain = 200L,   ADC_baseline = ADC_zero,   ADC_units = \"mV\",   ADC_resolution = 12L,   ADC_zero = 0L,   initial_value = ADC_zero,   checksum = 0L,   blocksize = 0L,   label = character(),   info_strings = list(),   additional_gain = 1,   low_pass = integer(),   high_pass = integer(),   color = \"#000000\",   scale = integer() )  is_header_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Table — header_table","text":"record_name character vector record line information number_of_channels integer describing number signals frequency numeric value sampling frequency, 250 Hz default samples integer number samples start_time POSIXct time recording, miliseconds included. example, strptime(start_time, \"%Y-%m-%d %H:%M%:%OSn\") described base::strptime() ADC_saturation integer representing ADC saturation file_name character signal specific information storage_format integer bits storage format, 16-bit default ADC_gain integer ADC gain, default 200 ADC_baseline integer ADC baseline, defaults ADC_zero ADC_units character describe ADC units, \"mV\" default ADC_resolution integer ADC resolution, default 12 ADC_zero integer ADC zero, defaults 0 initial_value integer initial value, defaults ADC_zero value checksum integer serves checksum blocksize integer block size label character description signal info_strings list strings written appendix header file, usually containing information channels, (e.g. list colors, extra labels, etc). additional_gain numeric Additional gain, defaults 1.0 low_pass integer Low pass filter high_pass integer High pass filter color character Color hexadecimal format, defaults black scale integer Scale x data.table object serves header table","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Table — header_table","text":"header_table object extension data.table class. contains adaptation function arguments, allowing compatibility WFDB class.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Table — header_table","text":"header_table object relatively complex directly deals properties signal, allows compatibility WFDB files raw header files signal objects. can written using write_wfdb().","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/header_table.html","id":"header-file-structure","dir":"Reference","previous_headings":"","what":"Header file structure","title":"Header Table — header_table","text":"three components header file: Record line contains following information, order documented, however pieces may missing based different parameters. left right... Record name Number signals: represents number segments/channels Sampling frequency (optional) Number samples (optional) Time: HH:MM:SS format (optional) Date: DD/MM/YYYY (optional) Signal specification lines contains specifications individual signals, must many signal lines reported record line. left right.... File name: usually *.dat Format integer: represents storage type, e.g. 8-bit 16-bit ADC gain: ADC units per physical unit (optional) Baseline: corresponds 0 physical units, sep = '*(0)\" (optional) Units: '/' field separator e.g '*/mV' (optional) ADC resolution integer: bits, usually 8 16 (optional) ADC zero: represents middle ADC input range (optional) Initial value (optional) Checksum (optional) Block size (optional) Description: text label information (optional) Info strings unstructured lines contains information record. Usually descriptive. Starts initial '#' without preceding white space beginning line.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG and EGM data from LabSystem Pro — lspro","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"function allows reading LS Pro data based text export signals. Signals can exported directly LS Pro system. LabSystem Pro acquired Boston Scientific original company Bard. common electrophysiology signal processing device visualization measurement intracardiac signals.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"","code":"read_lspro(file, n = Inf)  read_lspro_header(file)  read_lspro_signal(file, n = Inf)"},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"file path file data located. must *.txt file. See details format. n Number signal values return (channel data). Defaults values.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"egm class object list eps signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":"data-export","dir":"Reference","previous_headings":"","what":"Data Export","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"steps data export follows. Start LabSystem PRO Open patient record Display waveform recording Review Window Scroll point interest waveform recording Right click review window left region interest Select Export option, either default time range entire visible page (depends sweep speed).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/lspro.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data Format","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"Channel Data interleaved example (sample indexed 1):","code":"[Header] Recording info – contains (example):  [Header]<CR><LF>      File Type: 1<CR><LF>      Version: 1<CR><LF>      Channels exported: 22<CR><LF>      Samples per channel: 5000<CR><LF>      Start time:  6:55:24<CR><LF>      End time:  6:55:29<CR><LF>      Ch. Info. Pointer: 320<CR><LF>      Stamp Data: T<CR><LF>      Mux format: 0<CR><LF>      Mux Block Size: <CR><LF>      Data Format 1<CR><LF>      Sample Rate: 1000Hz<CR><LF>  [Header] Channel info (per channel example):    Channel #: 1<CR><LF>   Label: III<CR><LF>      Range: 5mv <CR><LF>      Low: 1Hz<CR><LF>      High: 100Hz<CR><LF>      Sample rate: 1000Hz<CR><LF>      Color: 0000FF<CR><LF>      Scale: -7<CR><LF>  [Data] As described below:      -256,-1056,576,-256,320,-736,144,576,-592,176,608,240,176,-560,496,-     144,0,0,-32,-48,-32,-80<CR><LF>"},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG data from MUSE — muse","title":"Read in ECG data from MUSE — muse","text":"function serves read/convert XML based files MUSE system digital signal. can subsequently written formats. MUSE system somewhat proprietary, version may may allow export options XML.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG data from MUSE — muse","text":"","code":"read_muse(file)"},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG data from MUSE — muse","text":"file ECG file MUSE XML format","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG data from MUSE — muse","text":"egm class object list eps signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/muse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in ECG data from MUSE — muse","text":"GE Healthcare MUSE v9 currently model used. functions tested older models.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/new_ggm.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct ggm class — new_ggm","title":"Construct ggm class — new_ggm","text":"Construct ggm class","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/new_ggm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct ggm class — new_ggm","text":"","code":"new_ggm(object = ggplot(), header = list(), annotation = annotation_table())"},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Segmentation of electrical signal by wave specifications — segmentation","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Segmentation electrical signal wave specifications","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"","code":"segmentation(   object,   by = \"sinus\",   pad = \"before\",   pad_length = 0L,   center = NULL )  segment_by_sinus(object)  pad_sequence(object, pad, pad_length)  center_sequence(object, center, pad_length)"},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"object Object egm class, includes header, signal information, annotation information. character string naming waveform type segment . Options include following: sinus = call segment_by_sinus() egm object pad character String specify side sequence pad (). Options include c(\"\", \"\", \"\"). Default . center used, argument ignored. pad_length Offers padding segmented beats maximum length, integer. default 0L, means padding applied. pad > 0 add baseline value (specified within header signal) either signal. can also choose center sequence, also occur pad > 0. .e., pad = 500 segmented object increased max length 500. maximum size larger padding size, warning issued sequence truncated. center single Roman alphabetic letter character utilizes annotations given egm object center sequence. found type variable annotation table. example, sinus waveforms annotated c(\"P\", \"R\", \"T\") peak, center around R. occur pad > 0L. case-insensitive. amount padding determined pad_length argument","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Returns list egm objects. item segmentation egm, using selected channels (available). attempt optimize pick best annotations help create consistencies signal channels possible.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Requires 12-lead ECG digitized, input egm object. object must annotation file associated contains demarcation annotations. Please see approaches based annotation type. Current, following supported: sinus = supports using ecgpuwave annotator","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/segmentation.html","id":"sinus-beat-segmentation","dir":"Reference","previous_headings":"","what":"Sinus beat segmentation","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Identify individual sinus beats surface ECG extract individual beats, returning list sinus beats form egm class. consistent P, R, T wave amongst channels. channel , example, visible T wave, still label information gained channels. based algorithm annotation tool named ecgpuwave. Please see read_annotation() details.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/shiva-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","title":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","text":"Importing rhythm signal data analysis R","code":""},{"path":[]},{"path":"https://shah-in-boots.github.io/EGM/reference/shiva-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","text":"Maintainer: Anish S. Shah ashah282@uic.edu (ORCID)","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal tables — signal_table","title":"Signal tables — signal_table","text":"signal_table() function modifies data.table class work electrical signal data. input data set equal number rows. add column index positions called sample already exist.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal tables — signal_table","text":"","code":"signal_table(...)  is_signal_table(x)"},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal tables — signal_table","text":"... list equal lengths x data.frame data frame signal data","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/signal_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal tables — signal_table","text":"object class signal_table, extension data.table class. sample column invariant always present. columns represent additional channels.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Waveform Database (WFDB) Software Package — wfdb","title":"Waveform Database (WFDB) Software Package — wfdb","text":"implementation WFDB back-end WFDB using combination python, C++, C language. related functions documented separately. serves overview conversion WFDB formats R formats. documentation, specific WFDB generated files described.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waveform Database (WFDB) Software Package — wfdb","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') ... Additional arguments passed function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"wfdb","dir":"Reference","previous_headings":"","what":"WFDB","title":"Waveform Database (WFDB) Software Package — wfdb","text":"WFDB (Waveform Database) Software Package developed past thirty years, providing large collection software processing analyzing physiological waveforms. package written highly portable C can used popular platforms, including GNU/Linux, MacOS X, MS-Windows, versions Unix. foundation WFDB Software Package WFDB library, consisting set functions reading writing digitized signals annotations. functions can used programs written C, C++, Fortran, running operating system ANSI/ISO C compiler available, including versions Unix, MS-DOS, MS-Windows, Macintosh OS, VMS.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data format","title":"Waveform Database (WFDB) Software Package — wfdb","text":"records WFDB uses three components... Signals: integer values equal intervals certain sampling frequency Header attributes: recording information sample number, gain, sampling frequency Annotations: information record abeat labels alarm triggers","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Waveform Database (WFDB) Software Package — wfdb","text":"Original software: George Moody, Tom Pollard, Benjamin Moody  R implementation: Anish S. Shah  Last updated: 2024-05-22","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Read WFDB-compatible annotation file — wfdb_annotations","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"Individual annotation types described command-line tool annotating WFDB-files, well extension appended record name notate type. Generally, types annotations supported described : atr = manually reviewed corrected reference annotation files ann = general annotator file ecgpuwave = files contain surface ECG demarcation (P, QRS, T waves) sqrs/wqrs/gqrs = standard WFDB peak detection R waves thorough explanation given details. Additionally, files read converted binary format textual format. raw data however may inadequate, original annotation may erroneous. cases, empty annotation_table object returned.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"","code":"read_annotation(   record,   record_dir = \".\",   annotator,   wfdb_path = getOption(\"wfdb_path\"),   begin = \"00:00:00\",   end = NA_character_,   ... )  write_annotation(   data,   annotator,   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   ... )  annotate_wfdb(   record,   record_dir,   annotator,   wfdb_path = getOption(\"wfdb_path\"),   ... )"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') begin, end character format HH:MM:SS used help parse time annotation. parameters together create time range extract. default 0 shortcut 00:00:00. seconds argument can include decimal place. ... Additional arguments passed function data annotation_table containing 6 invariant columns required annotation_table() function","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"function either read annotation using read_annotation() function format annotation_table object, write file/disk annotation_table WFDB-compatible annotation file using write_annotation() function. IMPORTANT: annotation files created annotators developed independently, higher chance erroroneous file created disk. , function note error return empty annotation_table times.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"annotation-files","dir":"Reference","previous_headings":"","what":"Annotation files","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"following annotation file types described .","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_annotations.html","id":"ecgpuwave","dir":"Reference","previous_headings":"","what":"ecgpuwave","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"ecgpuwave analyzes ECG signal specified record, detecting QRS complexes locating beginning, peak, end P, QRS, ST-T waveforms. output ecgpuwave written standard WFDB-format annotation file (extension \"*.ecgpuwave\", expected). file can converted text format using rdann. details given ECGPUWAVE page. type column can p, t, N peak P wave, T wave, QRS (R peak) directly. output notation also includes waveform onset XXX waveform offset XXX. number column gives information type labels. number column gives modifier information. type classifier T wave annotation, number column can 0 (normal), 1 (inverted), 2 (positive), 3 (negative), 4 (biphasic negative-positive), 5 (biphasic positive-negative). type waveform onset offset, number can 0 (P wave), 1 (QRS complex), 2 (T wave).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":null,"dir":"Reference","previous_headings":"","what":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"function allows WFDB files read WFDB-compatible system, also allows writing WFDB-compatible files specific EP recording systems, indicated details section. Writing WFDB leads creation dat (signal) hea (header) file. required reading files well.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"","code":"write_wfdb(   data,   record,   record_dir,   wfdb_path = getOption(\"wfdb_path\"),   header = list(frequency = 250, gain = 200L, label = character()),   info_strings = list(),   ... )  read_wfdb(   record,   record_dir = \".\",   annotator = NA_character_,   wfdb_path = getOption(\"wfdb_path\"),   begin = 0,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_signal(   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   begin = 0L,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_header(record, record_dir = \".\", wfdb_path = getOption(\"wfdb_path\"), ...)"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"data Can either egm object, data.frame (similar) object. function appropriately set defaults based type. egm = extract signal header data directly object, thus simplest convert WFDB format signal_table = customized data.table class invariant column containing sample information. data.frame data.table = Must column represents time point index, columns represent signal values (preferably integers) record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') header header file optional named list parameters used organize describe signal input data argument. type given, specific additional elements searched , low high pass filters, colors, signal attributes. minimum, following elements required (calculated): frequency = sample frequency Hertz integer label = vector names channel character start_time = date/time object info_strings list strings written appendix header file, usually containing information channels, (e.g. list colors, extra labels, etc). ... Additional arguments passed function annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. begin, end, interval Timepoint integer (representing seconds), converted index position based sampling frequency. default start beginning record. end interval given, earlier two returned. end argument gives time index read . interval argument length time past start point. units character string representing either digital (DEFAULT) physical units used, available. digital = Index sample number, signal integers (/D units) physical = Index elapsed time, signal decimal voltage (e.g. mV). include 1 additional row header/column names describes units channels Either signal/channel character vector name number. Allows duplication signal re-order signal needed. nothing given, default channels available.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"Depends reading writing function. writing, output WFDB-based object reflecting function. reading, output extension data.table object reflecting underlying function (e.g. signal_table() return object class).","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"write_wfdb(): Writes signal header data WFDB-compatible format R. read_wfdb(): Reads multicomponent WFDB-formatted set files directly egm object. serves pull together read_signal(), read_header(), read_annotation() simplicity. read_signal(): Specifically reads signal data WFDB binary format, returning signal_table object evaluation R environment read_header(): Specifically reads header data WFDB header text format, returning header_table object evaluation R environment","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_io.html","id":"recording-systems","dir":"Reference","previous_headings":"","what":"Recording systems","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"Type signal data, specified recording system, currently supported. lspro = LabSystem Pro, e.g. read_lspro() muse = GE MUSE, e.g. read_muse()","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"WFDB path utilities — wfdb_paths","title":"WFDB path utilities — wfdb_paths","text":"functions used help find locate commands installation WFDB. helpful setting getting path options specific WFDB commands. primarily internal helper functions, documented troubleshooting purposes.","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WFDB path utilities — wfdb_paths","text":"","code":"find_wfdb_software()  set_wfdb_path(.path)  find_wfdb_command(.app, .path = getOption(\"wfdb_path\"))"},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WFDB path utilities — wfdb_paths","text":".path character string describes path WFDB binary directory .app name WFDB software command application character","code":""},{"path":"https://shah-in-boots.github.io/EGM/reference/wfdb_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WFDB path utilities — wfdb_paths","text":"functions helper functions work user-installed WFDB software. always return object, primarily used side effects. primarily developer functions, exposed user help troubleshoot issues installation WFDB.","code":""},{"path":"https://shah-in-boots.github.io/EGM/news/index.html","id":"egm-010","dir":"Changelog","previous_headings":"","what":"EGM 0.1.0","title":"EGM 0.1.0","text":"first CRAN release package. initial version contains key features working intracardiac electrograms (EGM) surface electrocardiograms (ECG), visualizing signals, working annotations stored WFDB format. single, major class introduced . signal_table contains raw signal data header_table contains meta-data signal data annotation_table identifies samples labels specific annotations Additional /O features introduced work data stored WFDB format: read_wfdb() reads WFDB data returns egm object write_wfdb() writes egm object WFDB-compatible format first version also allows working ECG EGM data using: read_muse() ECG data (GE MUSE, v9) read_lspro() EGM data (LabSystem Pro)","code":""}]
